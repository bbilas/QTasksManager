/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p OrgCinnamonScreenSaver org.cinnamon.ScreenSaver.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORGCINNAMONSCREENSAVER_H
#define ORGCINNAMONSCREENSAVER_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.cinnamon.ScreenSaver
 */
class OrgCinnamonScreenSaverInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.cinnamon.ScreenSaver"; }

public:
    OrgCinnamonScreenSaverInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgCinnamonScreenSaverInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> GetActive()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetActive"), argumentList);
    }

    inline QDBusPendingReply<uint> GetActiveTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetActiveTime"), argumentList);
    }

    inline QDBusPendingReply<uint> GetSessionIdleTime()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSessionIdleTime"), argumentList);
    }

    inline QDBusPendingReply<> Lock(const QString &message)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(message);
        return asyncCallWithArgumentList(QStringLiteral("Lock"), argumentList);
    }

    inline QDBusPendingReply<> Quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Quit"), argumentList);
    }

    inline QDBusPendingReply<> SetActive(bool e)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(e);
        return asyncCallWithArgumentList(QStringLiteral("SetActive"), argumentList);
    }

    inline QDBusPendingReply<> SimulateUserActivity()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SimulateUserActivity"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActiveChanged(bool arg_0);
};

#endif
